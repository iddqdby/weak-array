{
  "name": "PHP Weak Array",
  "tagline": "",
  "body": "# WeakArray\r\n\r\n[![Build Status](https://travis-ci.org/iddqdby/weak-array.svg?branch=master)](https://travis-ci.org/iddqdby/weak-array)\r\n[![Latest Stable Version](https://poser.pugx.org/iddqdby/weak-array/v/stable)](https://packagist.org/packages/iddqdby/weak-array)\r\n[![Total Downloads](https://poser.pugx.org/iddqdby/weak-array/downloads)](https://packagist.org/packages/iddqdby/weak-array)\r\n[![License](https://poser.pugx.org/iddqdby/weak-array/license)](https://packagist.org/packages/iddqdby/weak-array)\r\n\r\n## Short description\r\n\r\nWeakArray is an array of weak references, based on WeakRef PHP extension (see https://pecl.php.net/package/Weakref).\r\n\r\nIt keeps weak references to objects, allowing them to be garbage-collected when there are no other references present.\r\n\r\n## How to install\r\n\r\n```sh\r\ncomposer require iddqdby/weak-array\r\n```\r\n\r\nor download the archive, extract it and include file `autoload.php`.\r\n\r\n## Examples\r\n\r\n### Basic usage\r\n\r\n#### Code\r\n\r\n```php\r\n$weak_array = new WeakArray\\WeakArray();\r\n\r\n$foo = new stdClass();\r\n$bar = new stdClass();\r\n$baz = new stdClass();\r\n\r\n$weak_array['foo'] = $foo;\r\n$weak_array['bar'] = $bar;\r\n$weak_array['baz'] = $baz;\r\n\r\nvar_export($weak_array['foo']);\r\necho \"\\n\";\r\n\r\nvar_export($weak_array['bar']);\r\necho \"\\n\";\r\n\r\nvar_export($weak_array['baz']);\r\necho \"\\n\";\r\n\r\necho \"====\\n\";\r\n\r\nunset($foo);\r\nunset($bar);\r\n\r\nvar_export($weak_array['foo']);\r\necho \"\\n\";\r\n\r\nvar_export($weak_array['bar']);\r\necho \"\\n\";\r\n\r\nvar_export($weak_array['baz']);\r\necho \"\\n\";\r\n```\r\n\r\n#### Output\r\n\r\n```\r\nstdClass::__set_state(array(\r\n))\r\nstdClass::__set_state(array(\r\n))\r\nstdClass::__set_state(array(\r\n))\r\n====\r\nNULL\r\nNULL\r\nstdClass::__set_state(array(\r\n))\r\n```\r\n\r\n### Events\r\n\r\n#### Code\r\n\r\n```php\r\nclass Observer implements \\SplObserver {\r\n    public function update(\\SplSubject $event) {\r\n        // $event instanceof WeakArray\\Event;\r\n        // see WeakArray\\Event class to view all available methods and Event::* constants\r\n        switch ($event->getType()) {\r\n            case WeakArray\\Event::OBJECT_SET:\r\n                $event_str = 'set';\r\n                break;\r\n            case WeakArray\\Event::OBJECT_UNSET:\r\n                $event_str = 'unset';\r\n                break;\r\n            case WeakArray\\Event::OBJECT_DESTRUCTED:\r\n                $event_str = 'destructed';\r\n                break;\r\n        }\r\n        printf(\"Object %s, key %s\\n\", $event_str, $event->getKey());\r\n    }\r\n}\r\n\r\n$weak_array = new WeakArray\\WeakArray();\r\n$observer = new Observer();\r\n\r\n$weak_array->attach($observer);\r\n\r\n$foo = new stdClass();\r\n$bar = new stdClass();\r\n$baz = new stdClass();\r\n\r\n$weak_array['foo'] = $foo;\r\n$weak_array['bar'] = $bar;\r\n$weak_array['baz'] = $baz;\r\n\r\nunset($foo);\r\n\r\nunset($weak_array['bar']);\r\nunset($weak_array['baz']);\r\n```\r\n\r\n#### Output\r\n\r\n```\r\nObject set, key foo\r\nObject set, key bar\r\nObject set, key baz\r\nObject destructed, key foo\r\nObject unset, key bar\r\nObject unset, key baz\r\n```\r\n\r\nSee `examples/` and `test/` directories for working examples.\r\n\r\n## Requirements\r\n\r\n* PHP: 5.5, 5.6, 7.0\r\n* WeakRef PHP extension: 0.2.6 for PHP 5.5 and PHP 5.6, >=0.3 for PHP 7.0\r\n\r\n## Homepage\r\n\r\nhttps://iddqdby.github.io/weak-array/\r\n\r\n## Versioning\r\n\r\nThis project follows the [Semantic Versioning](http://semver.org/) principles.\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License. See [LICENSE](LICENSE).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}